/*
 * Copyright 2011 SpringSource and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dsld

/**
 * Hackergarten contribution
 *
 * @author Lukasz Pielak
 * @author Max Rydahl Andersen
 * @author Tom Bujok (reficio.org)
 * @author Andres Almiray
 */

[
    [
        annotation: 'groovy.util.logging.Log',
        logger:     'java.util.logging.Logger'
    ],
    [
        annotation: 'groovy.util.logging.Slf4j',
        logger:     'org.slf4j.Logger'
    ],
    [
        annotation: 'groovy.util.logging.Commons',
        logger:     'org.apache.commons.logging.Log'
    ],
    [
        annotation: 'groovy.util.logging.Log4j',
        logger:     'org.apache.log4j.Logger'
    ]
].each { data ->
    contribute(currentType(annotations: annotatedBy(data.annotation))) {
        for(annotationNode in annotations) {
            provider = 'Logging AST Transformations'
            def name = annotationNode.getMember('value') ?: 'log'
            property name: name,
                     type: data.logger
        }
    }
}
